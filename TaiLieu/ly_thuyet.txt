- PROXY là sợi dây liên kết giữa người truy cập internet và Internet, dùng để chuyển tiếp thông tin và kiểm soát sự an
toàn cho người dùng. Có IP riêng và 1 cổng cố định
- Máy chủ Proxy:
    + Quản lý và kiểm soát số lượng truy cập vào internet
    + Tiết kiệm băng thông sử dụng được
    + Cải thiện và tối ưu tốc độ truy cập Internet trên các thiết bị
    + Bảo mật riêng tư quyền truy cập Internet
    + Tiếp cận, truy cập những nguồn dữ liệu bị chặn

- Băng thông là được sử dụng để truyền tải dữ liệu có sẵn trong 1 giây. Cũng có thể hiểu là TỐC ĐỘ TRUYỀN TẢI DỮ LIỆU
TRONG 1 ĐƯỜNG TRUYỀN
    + Mô tả dữ liệu lớn nhất mà người truy cập có thể tải xuống hoặc đăng lên giữa các website trên máy tính trong 1
    thời gian nhất định
    + Băng thông được đo bằng đơn vị BIT TRÊN GIÂY (bps). Trên máy tính hiện nay thì tốc độ băng thông lên tới hàng
      triệu bit trên giây (Mbps) hay thậm chí hàng tỷ bit trên giây (Gbps)

- Firewall là hệ thống an ninh mạng, sử dụng quy tắc để kiểm soát traffic vào ra khỏi hệ thống
    + Tường lửa hoạt động như 1 rào chắn giữa mạng an toàn và mạng ko an toàn
    + Bất kì máy tính nào kết nối internet cũng cần có firewall
    + Bảo mật IP
    + Sử dụng Rule để làm việc với kết nối tốt và loại bỏ kết nối xấu

- VPN (Vitual Private Network) nghĩa là mạng riêng ảo
    + Cho phép user thiết lập riêng 1 mạng ảo vs 1 mạng khác trên internet
    + SỬ dụng để truy cập các trang web hạn chế về mặt địa lý
    + Bật VPN sẽ kết nối mạng cục bộ, toàn bộ lưu lượng mạng lại luân chuyển qua kết nối an toàn VPN

- VPS: (Virtual Private Server) nghĩa là máy chủ riêng ảo
    + Là 1 loại máy chủ mà bạn có thể mua 1 phần của nó để sử dụng như là 1 máy chủ riêng của bạn
    + Bạn có thể cài đặt, quản lí hệ điều hành, phần mềm và các dịch vụ mạng như là 1 máy chủ thực sự
    + Tuy nhiên bạn sẽ chia sẻ tài nguyên với các máy chủ khác trên cùng 1 máy chủ vật lý.
    + Là 1 lựa chọn tốt cho những người muốn có 1 máy chủ riêng mà không muốn phải chi trả giá cho 1 máy chủ đầy đủ.

- nginx:
    - Là ứng dụng web server
    - Theo truyền thống thì khi gửi request mở 1 trang web, trình duyệt sẽ liên lạc với máy chủ của trang web đó. Sau
    đó, máy chủ tìm kiếm các file đc request cho trang và gửi nó đến trình duyệt. Là loại request đơn giản nhất
    - Nhưng Nginx ko làm theo cách đó, Nginx thực hiện với kiến trúc hướng sự kiện ko đồng bộ.
    - Tức là các luồng tương tự được quản lý theo worker process
    - Mỗi worker process chứa các đơn vị nhỏ hơn gọi là worker connection.
    - Toàn bộ các đơn vị này sau đó chịu trách nhiệm xử lý các luồng yêu cầu.
    - Worker connection cung cấp các yêu cầu cho worker process, cũng sẽ gửi nó đến master process.
    - Cuối cùng, master process cung cấp kết quả của những yêu cầu đó
    (1 worker connection có thể xử lý tới 1024 request tương tự ==> Nginx có thể xử lý hàng ngàn yêu cầu mà ko gặp bất
    kì khó khăn nào)

- Apache:
    - Là web server dùng để thiết lập kết nối giữa server và trình duyêt người dùng (chorme, FireFox,...) rồi chuyển
    file tới và lui giữa chúng (cấu trúc 2 chiều dạng client-server).
    - Client truy cập trang web --> trình duyệt sẽ gửi request lên server --> Apache trả về kết quả với tất cả các file
    cấu thành nên trang web (hình ảnh, chữ,...).
    - Server và Client giao tiếp với nhau qua giao thức HTTP và Apache chịu trách nhiệm cho việc đảm bảo tiến trình này
    diễn ra mượt mà và bảo mật giữa 2 máy

==> Đối với những doanh nghiệp vừa và nhỏ, Apache hiệu quả và dễ cấu hình hơn

- Microservice
    + Là 1 kiến trúc phần mềm. Các module trong phần mềm này được chia thành các service rất nhỏ (microservice).
    + Mỗi service sẽ được đặt trên 1 server riêng --> dễ dàng để nâng cấp và scale ứng dụng

=======================================
- IOPS(In/Output operation per Second): số lượng chuyến đi thực hiện trong 1 khoảng thời gian, thông số càng cao thì tốc
độ xử lý càng nhanh
- Throughput: Số hàng chuyển đi trong 1 khoảng thời gian
- Latency: Độ trễ trung bình trong tất cả các chuyến đi trong 1 khoảng thời gian đã thực hiện

========================================
* Kubernetes (k8s) là nền tảng mã nguồn mở giúp tự động việc mở rộng, quản lí, triển khai ứng dụng dưới dạng Container,
nền tảng này loại bỏ được nhiều quy trình thủ công về việc mở rộng và triển khai
- Khi nào nên sử dụng?
    + Các công ty lớn có nhu cầu mở rộng hệ thống nhanh chóng
    + Các dự án cần chạy nhiều hơn 5 Container cùng loại cho 1 dịch vụ
    + Các công ty khởi nghiệp chịu đầu tư vào công nghệ để dễ dàng mở rộng hệ thống về sau

- Tại sao lại cần thiết:
    + Khi thực sự chạy các container trong production, 1 người có thể tạo hàng chục, hàng nghìn container theo thời gian
    Những container này cần được triển khai(trên nhiều server host), quản lí, kết nối và cập nhật và nếu thực hiện
    công việc này 1 cách thủ công thì sẽ cần cả nhóm chỉ để dành riêng cho việc này.
    + Trong môi trường Production , việc quản lý hệ thống chạy bằng container chỉ sử dụng docker là rất khó khăn

- Giải quyết vấn đề:
    + Việc quản lý hàng loạt docker host
    + Container scheduling
    + Rolling update
    + Scaling/AutoScaling
    + Monitor Vòng đời và tình trạng sống chết của container
    + Self-hearing trong trường hợp có lỗi xảy ra (Có khả năng phát hiện và tự correct lỗi)
    + Service discovery
    + Load balancing
    + Quản lý data, work node, log
    + Infrastructure as Code,
    + Sự liên kết và mở rộng với các hệ thống khác

- Đặc điểm nổi bật:
    + Môi trường Production, bạn cần quản lý Container chạy ứng dụng và bảo đảm ko có thời gian downtime(thời gian mà
    user ko truy cập được trang web). Đó là lý do tại sao nên sử dụng kubernetes. Nền tảng này cung cấp Framework chạy
    trên hệ thống phân tán mạnh mẽ, chúng có tác dụng nhân rông và chuyển đổi cho ứng dụng

    + Cân bằng tải và Service discovery:
        K8s chỉ ra 1 container sử dụng IP hoặc DNS của riêng nó. Nếu lượng user truy
        cập quá nhiều, K8s sẽ tự dộng cân bằng tải và phân phối lưu lượng để việc triển khai ổn định hơn.
    + Điều chỉnh bộ nhớ (Storage orchestration):
        K8s tự động liên kết hệ thống lưu trữ mà chúng ta có thể lựa chọn
        Người dùng có thể tự điều chỉnh bộ nhớ cho phù hợp với nhu cầu và mục đích sử dụng mà mình cần
    + Tự động rollout và rollback
        Thiết lập trạng thái cho mỗi Container, bằng cách dùng K8s để thay thế trạng thái hiện tại thành trạng thái
        mong muốn với tốc độ được kiểm soát (VD: Xóa Container sẵn có, tạo 1 container khác)
    + Automatic bin packing - Đóng gói tự động:
        Bằng cách cung cấp cho K8s cụm CLuster Bode để dùng cho tác vụ trong Container, bạn sẽ cho K8s biết có bao nhiêu
        CPU, Ram có thể dùng, Framework này sẽ tự động lắp các Node để tối ưu nguồn tài nguyên mà chúng ta cung cấp
    + Tự phục hồi
        K8s có khả năng tự động khởi động lại các Container bị lỗi. Trong trường hợp chúng ta kiểm tra và không thấy
        Container đó phản hồi, nó sẽ tự động thay thế hoặc loại bỏ Container đó. Sau đó, nền tảng này sẽ gửi thông tin
        cho user khi Container đã trở về trạng thái khả dụng
    + Bảo mật và quản lý cầu hình
        Với K8s chúng ta dễ dàng quản lý hay lưu trữ thông tin cần phải bảo mật cao như: SHH key, OAth token, mật khẩu,.
        Ta có thể triển khai các ứng dụng, cập nhật thông tin cần phải bảo mật cao mà không phải xây dụng hay cấu hình
        lại Container

- Một số khái niệm cơ bản trong k8s:
    + Master Node: là Server điều khiển các máy Worker chạy ứng dụng. Gồm 4 thành phần chính:
        * Kubernetes API Server: giúp các thành phần khác liên lạc với nhau. Các ứng dụng call API này
        * Scheduler: là tiến hành lập lịch trình triển khai các ứng dụng.(VD:Các ứng dụng được đặt vào Worker nào để chạy,..)
        * Controller Manager: quản lý worker, kiểm tra worker sống hay chết và đảm nhận việc nhân bản ứng dụng
        * Etcd: Cơ sở dữ liệu của K8s. Tất cả thông tin của K8s đề sẽ được lưu trữ cố định vào Etcd.

    + Worker Node: là Server chạy ứng dụng trên đó. Gồm 3 thành phần chính:
        * Container Runtime: giúp chạy các ứng dụng trong K8s dưới dạng Container. Thông thường sử dụng Docker.
        * Kubelet: Là thành phần giao tiếp vs K8s API Server và chịu trách nhiệm quản lý các Container trong K8s
        * K8s Service Proxy: phân tải giữa các ứng dụng

    * Kubectl: là 1 trong những công cụ cấu hình dòng lệnh cho K8s. Cho phép đẩy các ứng dụng deploy vào cụm K8s. Đồng
    thời cho phép các admin có thể quản trị được các cụm K8s.

    * Pod: chứa 1 hoặc nhiều Container, nơi mà ứng dụng chạy trong đó. Pob còn là tiến trình nằm trên các Worker Node.

    * Image: là phần mềm ứng dụng đã được gọi lại thành 1 chương trình có thể chạy dưới dạng Container. Các Pod sẽ tiến
    hành sử dụng các Image để chạy

    * Deployment: là cách thức giúp triển khai, cập nhật, quản trị các Pod trở nên dễ dàng, thuận tiện hơn

    * Replication Controller: điều khiển việc nên có bao nhiêu bản sao giống nhau của 1 pod. Giúp nhân bản hoặc giảm số
    lượng Pod trong quá trình hoạt động

    * Service: là phần mạng của K8s. Giúp các Pod gọi nhau ổn định hơn.

    * Label: Phân loại và quản lý Pod.

=============================================
* DOCKER:
    - Tại sao docker ra đời: Việc setup và deploy lên 1 hoặc nhiều server rất vất vả, vì việc cài đặt các công cụ,
     môi trường đến việc run được app, chưa kể việc không đồng nhất giữa các môi trường trên nhiều server khác nhau

    - Docker là 1 nền tảng cho developers và sysadmin để develop, deploy và run app với container. Nó cho phép tạo
    các môi trường (container) độc lập và tách biệt để khởi chạy và phát triển ứng dụng. Khi deploy lên bất kì server
    nào chỉ cần run container của Docker thì app sẽ đươc khởi chạy.

    - 1 số khái niệm:
        + Docker Client là cách mà bạn tương tác vs Docker qua Command trong terminal. Docker Client sẽ sử dụng API
        gửi lệnh tới Docker Daemon
        + Docker Daemon: là server Docker cho request từ Docker API. Nó quản lý images, containers, network, volume
        + Docker Volumes: là cách tốt nhất để lưu trữ dữ liệu liên tục cho việc sử dụng và tạo apps.
        + Docker Registry: là nơi lưu trữ riêng của Docker Images. Images được push vào registry và client sẽ pull
        imgaes từ registry.
        + Docker Hub: là Registry lớn nhất của Docker Images(mặc định). Có thể tùn thấy images và lưu trữ images của
        riêng bạn trên Docker Hub
        + Docker Repository: là tập hợp các Docker Images cùng tên nhưng khác tags.
        + Docker Networking: cho phép kết nối các container lại với nhau. Kết nối này có thể trên 1 hoặc nhiều host.
        + Docker Swarm: để phối hợp triển khai container.
        + Docker Services: là các container trong Production.1 service chỉ run 1 image nhưng nó mã hóa cách thức để run
        image - sử dụng port nào, boa nhiêu bản sao container run để service có hiệu năng cần thiết và ngay lập tức.
        + Docker File: là file chỉ dẫn qui trình build 1 image

    - Qui trình 1 hệ thống sử dụng Docker:
        + Build: Tạo DockerFile (code lưu trữ trong này). DockerFile này được build tại 1 máy tính đã cài đặt Docker Engine
        + Push: Sau khi có Container, thực hiện push Container lên cloud và lưu tại đó.
        + Pull, Run: nếu máy tính khác muốn sử dụng Container cần pull về (tất nhiên phải cài Docker Engine). Sau đó run container.

================================================
* MYSQL
    - Là hệ quản lý cơ sở dữ liệu mã nguồn mở
    - Lưu trữ trong bảng, sử dụng ngôn ngữ truy vấn cấu trúc SQL để truy cập dữ liệu.
    - Thiết lập quy tắc điều chỉnh mối quan hệ giữa các bảng

* MONGODB:
    - Là cơ sở dữ liệu nguồn mở
    - Lưu trữ dưới dạng tài liệu biểu diễn nhị phân BSON (Binary Json)

* SO SÁNH TÍNH NĂNG
    - Ưu điểm:
        + Mysql:
            ~ Linh hoạt và dễ dùng
            ~ Hiệu năng cao (đáp ứng với tốc độ cao, xử lý nhiều dữ liệu)
            ~ Độ bảo mật cao
            ~ Hỗ trợ nhiều chức năng SQL

        + MongoDb:
            ~ Sử dụng khi khó xác định trước cấu trúc
            ~ Mô hình dữ liệu phong phú, linh hoạt hơn (Json)
            ~ Dung lượng và tốc độ lưu trữ tốt hơn, mang lại hiệu quả và độ tin cậy cao hơn
            ~ Lưu trữ dữ liệu phân cấp
            ~ Đọc ghi dữ liệu nhanh hơn
            ~ Tính mở rộng: cho phép thêm máy chủ và dung lượng lưu trữ khi dữ liệu tăng lên

    - Nhược điểm:
        + Mysql:
            ~ Dung lượng hạn chế (khắc phục: chia tải ra nhiều server, tạo cache)
            ~ Hạn chế trong việc xử lý dữ liệu lớn và phức tạp
            ~ Dữ liệu tăng lên có thể làm tốc độ chậm so với các hệ quản trị cơ sở dữ liệu khác

        + Mongodb:
            ~ Không có lệnh Join nên truy vấn giảm
            ~ Không có tính ràng buộc truy vấn (tự quản lý việc xác thực dữ liệu nên dễ bị làm sai dữ liệu)
                ---> ko hẳn là nhược điểm nếu cẩn thận
            ~ Tốn bộ nhớ (lưu trữ dạng key-value, key bị lặp lại, ko có Join nên lưu thêm dữ liệu vào các record)

===============================
* PYTHON là ngôn ngữ lập trình đa kế thừa (con - cha - ông)
    - Nguyên lý cơ bản:
        + Tính đóng gói: dữ liệu và phương thức được đóng thành 1 class thể hiện 1 nhóm chức năng của lớp đó. Che giấu
        thông tin qua các kiểu: public, protected(giống public), private (có 2 __ ở đầu phương thức)

        + Tính kế thừa: Con có thế kế thừa các thuộc tính và phương thức của cha--> ông mà ko cần khai báo lại

        + Tính trừu tượng: (abstraction) con bắt buộc kế thừa lại phương thức lớp cha (mặc dù lớp cha ko có body)

        + Tính đa hình: các class sử dụng tên phương thức giống nhau, khi gọi phương thức thì mỗi class sẽ thể hiện riêng.

    - Các kiểu dữ liệu: list, string, tuple, dictionary, set,...


===============================
* KAFKA
    - LÝ DO CHỌN KAFKA
        + Khả năng mở rộng: Kiến trúc phân tán của Kafka cho phép khả năng mở rộng theo chiều ngang đáng kể.
        + Hiệu suất: Kafka rất nhanh! Nó có thể xử lý hàng triệu tin nhắn mỗi giây với tài nguyên tương đối khiêm tốn.
        + Tính linh hoạt: Được thiết kế để giao tiếp với nhiều hệ thống khác nhau, Kafka có các API hữu ích, trực quan.
        + Tính khả dụng: Kafka mang lại tính khả dụng cao thông qua cân bằng tải và sao chép dữ liệu.
        + Cộng đồng: Là một phần của Apache Software Foundation, Kafka có một hệ sinh thái và cộng đồng phong phú.
        + Danh tiếng mạnh mẽ: Kafka được sử dụng bởi các tổ chức nổi tiếng hàng đầu, bao gồm không chỉ LinkedIn
        mà còn Netflix, Twitter, Spotify, Pinterest, Airbnb, Uber và nhiều tổ chức khác.

    - Kafka Cluster:
        + Là tập hợp của nhiều máy chủ
        + 1 cluster bao gồm nhiều broker. Mỗi broker là 1 máy chủ độc lập với nhau để quản lí các message của topic
        + Nếu 1 broker bị lỗi, các broker khác vẫn tiếp tục hoạt động
        + Cung cấp tính năng tự động tăng cường, bảo mật, quản lí, giám sát dữ liệu trong môi trường phức tạp dễ dàng hơn

===============================
* Multithread vs multiprocess

    + Chỉ có thể có một luồng chạy vào bất kỳ thời điểm nào trong một quy trình python.
    + Đa xử lý là song song. Đa luồng là đồng thời.
    + Đa xử lý là để tăng tốc độ. Đa luồng là để ẩn độ trễ.
    + Đa xử lý là tốt nhất cho tính toán. Đa luồng là tốt nhất cho IO
        ~ hoạt động IO nhanh: đọc ghi dữ liệu từ ổ đĩa, thực hiện request HTTP, tương tác database
        ~ hoạt động IO chậm: truy cập bộ nhớ RAM, phép tính thực hiện trên CPU
    + Nếu bạn có các tác vụ nặng với CPU, hãy sử dụng đa xử lý với n_process = n_cores và không bao giờ hơn thế nữa.
    + Nếu bạn có các tác vụ nặng IO, hãy sử dụng đa luồng với n_threads = m * n_coresmột msố lớn hơn 1 mà bạn có thể
     tự điều chỉnh. Hãy thử nhiều giá trị và chọn một giá trị có tốc độ tốt nhất vì không có quy tắc chung

    VD:
        - Tác vụ nặng CPU: 4 core, tác vụ khoảng 100%
            + multiprocess: mỗi core xử lý 100% --> nhanh gấp 4 lần
            + multithread: mỗi core xử lý 25% --> ko nhanh hơn
        - Tác vụ nặng IO:
            + multithread: truy vấn request 16 url, tăng số luồng lên 16--> càng nhiều luồng càng nhanh (nhưng số
            luồng ko được nhiều hơn số url)


===============================
* REDIS:
    - là (REmote Dictionary Server) 1 mã nguồn mở thường lưu trữ các dữ liệu có cầu trúc, lưu dưới dạng Key-Value
    - Hỗ trợ nhiều cấu trúc cơ bản: hash, list, set, string,... tất cả lưu trữ trên RAM nên tốc độ đọc ghi rất nhanh

=================================
* SESSION:
    - là 1 kĩ thuật trong lập trình máy chủ, được sử dụng để lưu trữ thông tin về trạng thái của 1 người dùng trong 1
    phiên sử dụng trang web.
    - Người dùng truy cập trang web --> máy chủ tạo 1 session để lưu trữ thông tin người dùng như tên đăng nhập,
     giỏ hàng,...và kết thúc session khi đóng ứng dụng

    ==> Giúp trải nghiệm tốt hơn

* COOKIE:
    - Cookie là 1 đoạn văn ghi thông tin được tạo ra và lưu trên trình duyệt của máy người dùng.
    - Được tạo ra khi truy cập 1 trang web, cookie sẽ ghi nhớ những thông tin như tên đăng nhập, mật khẩu,... lưu trên
    máy tính người dùng
    - Khi user truy cập đến 1 trang web có sử dụng cookie, web server sẽ tự động gửi cookie đó đến máy tính user
    VD: khi đăng nhập FB, Gmail và lưu lại đăng nhập thì thông tin sẽ được lưu trên cookie giúp cho lần đăng nhập sau
    nhanh hơn. Nếu xóa thì lần đăng nhập sau sẽ phải thực hiện lại từ đầu sẽ rất tốn thời gian

=================================
* CLOUD

    * Cloud Computing
        - Là cách triển khai và sử dụng các dịch vụ máy tính, lưu trữ và các ứng dụng trên internet.
        Tức là bạn có thể truy cập và sử dụng các tài nguyên máy tính như phần mềm, dữ liệu, và tài nguyên mạng mà không
        cần phải cài đặt chúng trên máy tính cục bộ của mình. Thay vào đó , tài nguyên đó được lưu trữ và chạy từ các máy
        chủ đám mây, và bạn có thể truy cập chúng thông qua Internet.
        - VD:
            + sử dụng dịch vụ Cloud Computing là khi sử dụng gg Drive để lưu trữ tài liệu của mình trực tuyến
            Bạn có thể upload tài liệu lên đó và truy cập từ bất cứ máy tính nào có Internet, mà ko cần dùng máy tính
            cục bộ của mình
            + Khi sử dụng dịch vụ mail như Gmail, Outlook,.. bạn có thể gửi và nhận email từ bất kì máy tính nào kết
            nối internet, mà ko cần dùng máy tính cục bộ của mình. Tất cả dữ liệu mail được lưu trữ trên máy chủ của
            dịch vụ mail, và có thể truy cập bất kì lúc nào

    * Clould Server
        - Là 1 loại máy chủ đám mây trực tuyến, trong đó bạn có thể lưu trữ, chạy các ứng dụng của mình.
        Bạn có thể tiết kiệm đáng kể trong việc quản lý và bảo trì máy chủ, vì nhà cung cấp dịch vụ đám mây sẽ giữ
        và quản lý các máy chủ cho bạn
        - VD:
            + Bạn muốn chia sẻ tài liệu thay vì upload lên máy tính cục bộ và sau đó mới chia sẻ nó, thì bạn có thể
            lưu trữ tài liệu trực tuyến trên 1 cloud server và chia sẻ nó 1 cách dễ dàng.